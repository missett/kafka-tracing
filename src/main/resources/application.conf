application {
  topics {
    inputs {
      spans: "opentracing-span-ingestion"
    }
  }
}

streams {
  bootstrap.servers: "localhost:9092", bootstrap.servers: ${?STREAMS_BOOTSTRAP_SERVERS}
  application.id: "tracing-analysis", application.id: ${?STREAMS_APPLICATION_ID}
  acks: "all", acks: ${?STREAMS_ACKS}
  auto.offset.reset: "latest", auto.offset.reset: ${?STREAMS_AUTO_OFFSET_RESET}
  max.poll.records: "500", max.poll.records: ${?STREAMS_MAX_POLL_RECORDS}
  commit.interval.ms: "0", commit.interval.ms: ${?STREAMS_COMMIT_INTERVAL_MS}
  replication.factor: "1", replication.factor: ${?STREAMS_CHANGELOG_REPLICATION_FACTOR}
  max.in.flight.requests.per.connection: 2, max.in.flight.requests.per.connection: ${?STREAMS_MAX_IN_FLIGHT_REQUESTS}
  compression.type: "lz4"
  metrics.recording.level: "DEBUG", metrics.recording.level: ${?STREAMS_METRICS_RECORDING_LEVEL}
  default.timestamp.extractor: "org.apache.kafka.streams.processor.WallclockTimestampExtractor"
  metrics.reporters: "org.apache.kafka.common.metrics.JmxReporter"
  default.key.serde: "org.apache.kafka.common.serialization.Serdes$StringSerde"
  default.value.serde: "org.apache.kafka.common.serialization.Serdes$StringSerde"

  security.protocol: "PLAINTEXT", security.protocol: ${?STREAMS_SECURITY_PROTOCOL},
  ssl.truststore.location: "", ssl.truststore.location: ${?STREAMS_SSL_TRUSTSTORE_LOCATION},
  ssl.truststore.password: "", ssl.truststore.password: ${?STREAMS_SSL_TRUSTSTORE_PASSWORD},
  ssl.keystore.location: "", ssl.keystore.location: ${?STREAMS_SSL_KEYSTORE_LOCATION},
  ssl.keystore.password: "", ssl.keystore.password: ${?STREAMS_SSL_KEYSTORE_PASSWORD},
  ssl.key.password: "", ssl.key.password: ${?STREAMS_SSL_KEY_PASSWORD}
  ssl.endpoint.identification.algorithm: ""

  default.deserialization.exception.handler: "org.apache.kafka.streams.errors.LogAndFailExceptionHandler", default.deserialization.exception.handler: ${?STREAMS_DEFAULT_DESERIALIZATION_EXCEPTION_HANDLER}
}