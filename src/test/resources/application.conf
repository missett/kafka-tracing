streams {
  application.id = "test-streams", application.id = ${?APPLICATION_ID}
  bootstrap.servers = "localhost:9092", bootstrap.servers = ${?BOOTSTRAP_SERVERS}

  request.timeout.ms = "40000", request.timeout.ms = ${?REQUEST_TIMEOUT_MS}
  reconnect.backoff.ms = "1000", reconnect.backoff.ms = ${?RECONNECT_BACKOFF_MS}
  retries = "15", retries = ${?RETRIES}
  retry.backoff.ms = "1000", retry.backoff.ms = ${?RETRY_BACK_OFF}
  auto.offset.reset = "earliest", auto.offset.reset = ${?AUTO_OFFSET_RESET}
  max.poll.records = "500", max.poll.records = ${?MAX_POLL_RECORDS}

  acks = "all", acks = ${?ACKS}
  commit.interval.ms = "100", commit.interval.ms = ${?COMMIT_INTERVAL_MS}
  replication.factor = "1", replication.factor = ${?CHANGELOG_REPLICATION_FACTOR}
  max.in.flight.requests.per.connection = "1", max.in.flight.requests.per.connection = ${?MAX_IN_FLIGHT_REQUESTS}
  default.key.serde = "org.apache.kafka.common.serialization.Serdes$StringSerde"
  default.value.serde = "org.apache.kafka.common.serialization.Serdes$StringSerde"

  consumer.interceptor.classes = "org.missett.kafka.interceptors.jaeger.JaegerConsumerInterceptor"
  producer.interceptor.classes = "org.missett.kafka.interceptors.jaeger.JaegerProducerInterceptor"

  jaeger.interceptor.service.name = "test-service"
  jaeger.interceptor.tracer.tags = "test-suite=embedded-kafka-tests"
  jaeger.interceptor.reporter.log.spans = "true"
  jaeger.interceptor.reporter.flush.interval = "1000"
  jaeger.interceptor.max.queue.size = "100"
  jaeger.interceptor.sender.host = "http://localhost"
  jaeger.interceptor.sender.port = "8000"
  jaeger.interceptor.sender.endpoint = "http://localhost:14268/api/traces"
  jaeger.interceptor.sampler.type = "remote"
  jaeger.interceptor.sampler.param = "1"
  jaeger.interceptor.sampler.hostport = "localhost:8001"
}
